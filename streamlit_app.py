# In√≠cio do Arquivo streamlit_app.py - Com Hist√≥rico da Sess√£o

import streamlit as st
import google.generativeai as genai
import os
from dotenv import load_dotenv
import docx
from docx import Document
import io
import datetime # <-- Adicionado: Import para usar data e hora

# --- Configura√ß√£o e Fun√ß√µes ---

# 1. Carregar a chave de API do arquivo .env e configurar Google AI
load_dotenv()
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

if not GOOGLE_API_KEY:
    st.error("Erro: Chave de API do Google n√£o encontrada no arquivo .env.")
    st.error("Por favor, adicione GOOGLE_API_KEY='sua_chave_aqui' ao seu arquivo .env")
    st.stop()

genai.configure(api_key=GOOGLE_API_KEY)

# Nome do modelo padr√£o para usar - **VERIFIQUE SE EST√Å CORRETO PARA SUA CHAVE!**
default_model_name = 'models/gemini-1.5-flash' # <--- Nome do modelo definido aqui


# Fun√ß√£o auxiliar para salvar texto (retorna dados para download)
def to_txt(text_content):
    """Converte texto para bytes em formato TXT com encoding UTF-8."""
    return text_content.encode('utf-8')

def to_docx(text_content):
    """Cria um documento DOCX na mem√≥ria (BytesIO) a partir de texto."""
    document = Document()
    for paragraph in text_content.split('\n'):
        document.add_paragraph(paragraph)
    buffer = io.BytesIO()
    document.save(buffer)
    buffer.seek(0)
    return buffer.getvalue()


# Fun√ß√£o para interagir com o modelo Gemini (geral para gera√ß√£o e corre√ß√£o)
def interagir_com_gemini(prompt, max_tokens, temperature, top_p=0.9, top_k=0):
    """Envia um prompt para o modelo Gemini e retorna a resposta."""
    try:
        model = genai.GenerativeModel(default_model_name)

        generation_config = genai.GenerationConfig(
            max_output_tokens=max_tokens,
            temperature=temperature,
            top_p=top_p,
            top_k=top_k
        )

        response = model.generate_content(
            prompt,
            generation_config=generation_config
        )

        return response.text

    except Exception as e:
        st.error(f"Ocorreu um erro na intera√ß√£o com o modelo '{default_model_name}': {e}")
        st.warning("Verifique o nome do modelo no c√≥digo, sua chave de API e conex√£o com a internet.")
        return None


# Dicion√°rios de op√ß√µes
tipos_texto_gerar = {
    'Artigo/Texto Acad√™mico': 'Artigo/Texto Acad√™mico',
    'E-mail Profissional': 'E-mail Profissional',
    'Post para Redes Sociais': 'Post para Redes Sociais',
    'Conte√∫do de Marketing Digital': 'Conte√∫do de Marketing Digital',
    'Roteiro Simples': 'Roteiro Simples',
    'Descri√ß√£o de Produto': 'Descri√ß√£o de Produto'
}

tons_disponiveis = {
    'Formal': 'Formal',
    'Amig√°vel': 'Amig√°vel',
    'Persuasivo': 'Persuasivo',
    'T√©cnico': 'T√©cnico',
    'Criativo': 'Criativo',
    'Neutro': 'Neutro'
}

# --- CSS Personalizado para o Fundo e Estilo ---
# Mantido como estava
custom_css = f"""
<style>
/* Define o fundo para preto no modo escuro/claro do Streamlit */
[data-theme="dark"], [data-theme="light"] {{
  background-color: #000000 !important;
  color: #ffffff; /* Garante que o texto padr√£o seja branco */
}}

/* Centraliza o conte√∫do principal vertical e horizontalmente na tela */
.st-emotion-cache-eczf16 {{ /* Esta classe pode mudar com atualiza√ß√µes do Streamlit! */
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 100vh; /* Ocupa pelo menos 100% da altura da viewport */
    padding: 20px; /* Adiciona um pouco de padding */
}}

/* Remove padding superior/inferior padr√£o do Streamlit que pode interferir */
.st-emotion-cache-1dp5vir {{ /* Esta classe pode mudar com atualiza√ß√µes do Streamlit! */
    padding-top: 0rem;
    padding-bottom: 0rem;
}}


/* Estilo para o t√≠tulo de boas-vindas */
.welcome-title {{
    font-size: 3em; /* Tamanho da fonte */
    color: #00aaff; /* Cor azul */
    text-align: center;
    margin-bottom: 10px; /* Espa√ßo abaixo do t√≠tulo */
    /* Adicione sombra ou gradiente se quiser replicar o efeito visual exato */
    text-shadow: 0 0 5px #00aaff, 0 0 10px #00aaff; /* Exemplo de sombra azul */
}}

/* Estilo para o subt√≠tulo (se houver) */
.welcome-subtitle {{
    font-size: 1.2em;
    color: #aaaaaa; /* Cor cinza claro */
    text-align: center;
    margin-bottom: 30px; /* Espa√ßo abaixo do subt√≠tulo */
}}


/* Estilo para o bot√£o COME√áAR */
.stButton > button {{
    background-image: linear-gradient(to right, #4e54c8, #8f94fb);
    color: white;
    font-size: 1.2em;
    padding: 10px 30px;
    border: none;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 0 10px rgba(143, 148, 251, 0.6), 0 0 20px rgba(143, 148, 251, 0.4);
    /* Centraliza√ß√£o horizontal adicional para o bot√£o dentro da coluna, se necess√°rio */
    display: block;
    margin: 0 auto;
    width: fit-content;
}}

.stButton > button:hover {{
    background-image: linear-gradient(to right, #8f94fb, #4e54c8);
    box-shadow: 0 0 15px rgba(143, 148, 251, 0.8), 0 0 30px rgba(143, 148, 251, 0.6);
}}

.stButton > button:active {{
    background-image: linear-gradient(to right, #4e54c8, #8f94fb);
    box-shadow: none;
}}


/* CSS para garantir que a p√°gina de APP n√£o fique centralizada verticalmente */
/* Precisamos identificar a classe correta para o cont√™iner principal da APP */
/* Este √© um ajuste mais avan√ßado e pode ser inst√°vel */
/* Como alternativa, podemos adicionar padding no topo da p√°gina APP */
/* st.write("<br>"*10, unsafe_allow_html=True) no topo da p√°gina APP */

</style>
"""

# Injeta o CSS personalizado
st.markdown(custom_css, unsafe_allow_html=True)


# --- Gerenciamento de Estado ---
# Inicializa o estado da p√°gina
if 'page' not in st.session_state:
    st.session_state.page = 'welcome'

# <-- Adicionado: Inicializa a lista do hist√≥rico da sess√£o se n√£o existir
if 'history' not in st.session_state:
    st.session_state.history = []


# --- Layout da P√°gina ---

# Mostra a Tela de Boas-Vindas
if st.session_state.page == 'welcome':
    welcome_content_container = st.container()
    with welcome_content_container:
        # T√≠tulo e subt√≠tulo
        st.markdown("<h1 class='welcome-title'>Bem-vindo(a) ao Skriva!</h1>", unsafe_allow_html=True)
        st.markdown("<p class='welcome-subtitle'>Serei seu Assistente de SKrita com IA</p>", unsafe_allow_html=True)

        # Bot√£o para ir para o aplicativo principal
        col1, col2, col3 = st.columns([1, 3, 1])
        with col2:
            if st.button("COME√áAR", key='start_button'):
                st.session_state.page = 'app'
                st.rerun() # For√ßa re-execu√ß√£o

# Mostra a Tela do Aplicativo Principal
elif st.session_state.page == 'app':
    # --- Conte√∫do do Aplicativo Principal ---

    # Nota: st.sidebar est√° desativado nesta vers√£o

    st.title("Vamos come√ßar?") # Mant√©m o t√≠tulo na p√°gina principal
    st.markdown("Use a intelig√™ncia artificial para gerar ou aprimorar seus textos.")

    # Usando abas para escolher a opera√ß√£o
    tab_gerar, tab_corrigir = st.tabs(["üöÄ Gerar Novo Texto", "‚ú® Corrigir/Aprimorar Texto Existente"])

    # --- Se√ß√£o Gerar ---
    with tab_gerar:
        col_tipo, col_tom = st.columns(2)
        with col_tipo:
            tipo_selecionado = st.selectbox("Tipo de Texto:", list(tipos_texto_gerar.keys()))
        with col_tom:
            tom_selecionado = st.selectbox("Tom:", list(tons_disponiveis.keys()))

        tema = st.text_input(f"Tema/Assunto para o '{tipo_selecionado}':")

        if st.button("Gerar Texto", key='btn_gerar'):
            if not tema:
                st.warning("Por favor, digite um tema/assunto.")
            else:
                prompt_geracao = f"""Crie um texto completo e bem estruturado do tipo "{tipo_selecionado}" sobre o tema/assunto: "{tema}"
                Use um tom "{tom_selecionado}".
                N√£o use g√≠rias, palavr√µes ou termos complexos demais a menos que o tema ou o tom t√©cnico exijam e sejam explicados.
                Responda em formato Markdown.
                """
                temp = 0.7
                max_tok = 1000
                top_p_val = 0.9
                top_k_val = 0

                if tipo_selecionado == 'Artigo/Texto Acad√™mico':
                     prompt_geracao += "\nInclua introdu√ß√£o, desenvolvimento com argumentos e exemplos relevantes, e conclus√£o. Mantenha a formalidade e objetividade."
                     temp = 0.6
                     max_tok = 1800
                     top_p_val = 0.95
                     top_k_val = 50
                elif tipo_selecionado == 'E-mail Profissional':
                     prompt_geracao += "\nFormate a resposta como um e-mail profissional pronto para envio, com linhas para Assunto: e Corpo:."
                     temp = 0.5
                     max_tok = 800
                     top_p_val = 0.9
                     top_k_val = 0
                elif tipo_selecionado == 'Post para Redes Sociais':
                     prompt_geracao += "\nSeja conciso (m√°ximo 280 caracteres se for Twitter, ajuste para outras redes), use linguagem engajadora e inclua hashtags relevantes ao tema."
                     temp = 0.8
                     max_tok = 400
                     top_p_val = 0.9
                     top_k_val = 0
                elif tipo_selecionado == 'Conte√∫do de Marketing Digital':
                     prompt_geracao += "\nFoque nos benef√≠cios, crie urg√™ncia ou desejo e inclua uma chamada para a√ß√£o (call to action) clara relevante ao tema/produto/servi√ßo."
                     temp = 0.9
                     max_tok = 1000
                     top_p_val = 0.9
                     top_k_val = 0
                elif tipo_selecionado == 'Roteiro Simples':
                     prompt_geracao += "\nFormate como um roteiro b√°sico, com indica√ß√£o de cenas, di√°logos e a√ß√µes."
                     temp = 0.8
                     max_tok = 1200
                     top_p_val = 0.95
                     top_k_val = 50
                elif tipo_selecionado == 'Descri√ß√£o de Produto':
                     prompt_geracao += "\nDescreva as caracter√≠sticas e benef√≠cios do produto de forma atraente para um p√∫blico comprador."
                     temp = 0.7
                     max_tok = 600
                     top_p_val = 0.9
                     top_k_val = 0

                with st.spinner("Gerando texto..."):
                    texto_novo = interagir_com_gemini(prompt_geracao, max_tok, temp, top_p_val, top_k_val)

                if texto_novo:
                    st.subheader("üìù Texto Gerado:")
                    st.markdown(texto_novo)

                    # <-- Adicionado: Adiciona ao hist√≥rico da sess√£o na Gera√ß√£o
                    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    st.session_state.history.append({
                        'type': 'Gerado',
                        'timestamp': timestamp,
                        'content': texto_novo,
                        'details': f'Tema: {tema}, Tipo: {tipo_selecionado}, Tom: {tom_selecionado}'
                    })
                    # Adiciona timestamp √†s chaves dos bot√µes para evitar conflitos se gerar r√°pido
                    dl_key_txt = f'dl_txt_gerar_{timestamp}'
                    dl_key_docx = f'dl_docx_gerar_{timestamp}'


                    st.subheader("üíæ Salvar Texto:")
                    col_txt_gerar, col_docx_gerar = st.columns(2)
                    with col_txt_gerar:
                        st.download_button(
                            label="üì• Baixar como TXT",
                            data=to_txt(texto_novo),
                            file_name=f"{tema[:50].replace(' ', '_')}_gerado.txt",
                            mime="text/plain",
                            key=dl_key_txt # Usando a chave √∫nica
                        )
                    with col_docx_gerar:
                        try:
                            docx_data = to_docx(texto_novo)
                            st.download_button(
                                label="üì• Baixar como DOCX",
                                data=docx_data,
                                file_name=f"{tema[:50].replace(' ', '_')}_gerado.docx",
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                key=dl_key_docx # Usando a chave √∫nica
                            )
                        except Exception as e:
                             st.warning(f"N√£o foi poss√≠vel gerar DOCX para download: {e}")


    # --- Se√ß√£o Corrigir ---
    with tab_corrigir:
        texto_original = st.text_area("Cole o texto que voc√™ quer corrigir aqui:", height=300)
        tom_selecionado_correcao = st.selectbox("Tom para a revis√£o/sugest√µes:", list(tons_disponiveis.keys()), index=0)

        if st.button("Corrigir Texto", key='btn_corrigir'):
            if not texto_original:
                st.warning("Por favor, cole o texto para corrigir.")
            else:
                prompt_correcao = f"""Por favor, revise e aprimore o seguinte texto.
                Use um tom {tom_selecionado_correcao} na revis√£o e nas sugest√µes.
                Corrija erros de ortografia, gram√°tica, pontua√ß√£o e d√™ sugest√µes para melhorar a clareza, a coes√£o e a fluidez. Mantenha o significado original do texto.
                N√£o use g√≠rias, palavr√µes ou termos complexos demais a menos que o texto original j√° os contenha e seja necess√°rio revis√°-los.
                Forne√ßa o texto revisado e, em uma se√ß√£o separada marcada como "Sugest√µes:", liste as sugest√µes de melhoria em t√≥picos numerados.
                Responda em formato Markdown.

                Texto a revisar:
                {texto_original}

                Texto revisado:
                """
                temp = 0.5
                max_tok = 1500
                top_p_val = 0.9
                top_k_val = 0

                with st.spinner("Corrigindo e aprimorando texto..."):
                     texto_revisado_completo = interagir_com_gemini(prompt_correcao, max_tok, temp, top_p_val, top_k_val)

                if texto_revisado_completo:
                    st.subheader("‚ú® Texto Revisado e Sugest√µes:")
                    st.markdown(texto_revisado_completo)

                    # <-- Adicionado: Adiciona ao hist√≥rico da sess√£o na Corre√ß√£o
                    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    st.session_state.history.append({
                        'type': 'Corrigido',
                        'timestamp': timestamp,
                        'content': texto_revisado_completo,
                        'details': f'Tom: {tom_selecionado_correcao}'
                    })
                    # Adiciona timestamp √†s chaves dos bot√µes para evitar conflitos
                    dl_key_txt_corr = f'dl_txt_corrigir_{timestamp}'
                    dl_key_docx_corr = f'dl_docx_corrigir_{timestamp}'


                    st.subheader("üíæ Salvar Texto Revisado:")
                    col_txt_corrigir, col_docx_corrigir = st.columns(2)
                    with col_txt_corrigir:
                         st.download_button(
                             label="üì• Baixar como TXT",
                             data=to_txt(texto_revisado_completo),
                             file_name=f"texto_revisado.txt",
                             mime="text/plain",
                             key=dl_key_txt_corr # Usando a chave √∫nica
                         )
                    with col_docx_corrigir:
                        try:
                             docx_data = to_docx(texto_revisado_completo)
                             st.download_button(
                                 label="üì• Baixar como DOCX",
                                 data=docx_data,
                                 file_name=f"texto_revisado.docx",
                                 mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                  key=dl_key_docx_corr # Usando a chave √∫nica
                             )
                        except Exception as e:
                             st.warning(f"N√£o foi poss√≠vel gerar DOCX para download: {e}")


    # <-- Adicionado: Se√ß√£o Hist√≥rico da Sess√£o -->
    st.markdown("---") # Separador visual antes do hist√≥rico
    with st.expander("Hist√≥rico da Sess√£o üïí"):
        if not st.session_state.history:
            st.info("O hist√≥rico da sess√£o est√° vazio. Gere ou corrija alguns textos!")
        else:
            # Exibe os itens do hist√≥rico (do mais recente para o mais antigo)
            for i, item in enumerate(reversed(st.session_state.history)):
                st.markdown(f"**{len(st.session_state.history) - i}. {item['type']}** ({item['timestamp']}) - *{item['details']}*")
                # Voc√™ pode escolher como exibir o conte√∫do:
                # st.text(item['content'][:200] + '...') # Exibe as primeiras 200 chars
                # Ou exibe o conte√∫do completo:
                # st.markdown(item['content']) # <- Descomente esta linha para mostrar o conte√∫do completo
                st.markdown("---") # Separador entre itens do hist√≥rico (opcional)


            # Bot√£o para limpar o hist√≥rico
            if st.button("Limpar Hist√≥rico da Sess√£o"):
                st.session_state.history = [] # Limpa a lista
                st.rerun() # For√ßa a atualiza√ß√£o da p√°gina para mostrar o hist√≥rico vazio
    # <-- Fim da Se√ß√£o Hist√≥rico da Sess√£o -->


    # --- Se√ß√£o de Ajuda (Usando Expander) - Aparece na tela 'app' ---
    with st.expander("Precisa de Ajuda? üí°"):
        st.write("""
        Ol√°! Sou seu assistente de escrita com IA. Se voc√™ tiver alguma d√∫vida sobre como usar esta ferramenta, sugest√µes de melhoria, ou encontrar algum problema, por favor, entre em contato.

        Ficarei feliz em ajudar. üòä

        **Contato com o Criador:**
        E-mail: **scribble.suport.flow@gmail.com** #
        """
        )

    # --- Informa√ß√£o do modelo no final - Aparece na tela 'app' ---
    st.markdown("---") # Linha separadora visual
    st.caption(f"Modelo AI usado: {default_model_name}")


# --- Fim do Arquivo streamlit_app.py ---